---
fig-cap-location: margin
---


# Solving {#sec-solving}

We're trying to solve partial differential equations. We're not using either of the two most common methods to do this numerically. If we were to use the [finite difference method](https://en.wikipedia.org/wiki/Finite_difference_method) we could represent our components as matrices and efficiently calculate the output of a component for a range of inputs by multiplying a fluid matrix with a component matrix. If we had a set of equations as described in the [finite element method](https://en.wikipedia.org/wiki/Finite_element_method) we could use [automatic differentiation](https://www.youtube.com/watch?v=vAp6nUMrKYg) to guide our search. I can't really say which of these is the better choice but both seem better than what we're doing now.

Our current model will tell you the state of the network if you enter a solvable set of inputs. But if you only get answers when you enter values that produce a known output then you don't gain anything by running the model.

If you enter an invalid set of inputs, then our output (the final state of the search) is where the model gave up looking for an answer, not what happens when you enter those inputs.

## Discontinuity points

| | Pressure | Temperature | Flowrate |
| - | - | - | - |
| Inlet | Unknown | Depends^[We can determine inlet temperature as a function of pressure] | Known |
| Valve | Unknown | Known | Known |
| Compressor | Depends^[Compressors are not well defined] | Unknown | Known |
| Splitter | Known | Known | Unknown |
| Heater | Known | Depends^[Increase by or to a value?] | Known |
| Cooler | Known | Depends | Known |

: Components where discontinuities occur {#tbl-discontinuities}

At an inlet, we want to know if there are any solutions with a fluid pressure below our maximum. At a valve, we ask "are there valid solutions with a fluid pressure above X at this point?" Depending on how compressors, heaters, and coolers are defined, we might ask whether a pressure/temperature increase to or by a certain amount at this point produces a valid solution.

You can produce direct answers to these with a good pipe segment model. If you were to change the set point of a valve, you wouldn't need to run all your simulations for the entire network again. For every series of pipe segments, we can define a curve similar to that of the reservoir, but for a pipe segment it would describe the relationship between inlet and outlet conditions. At different places in the network, we place constraints on these curves and want to know the value of the variable that is the last remaining degree of freedom.

![Inlet pressure demand curves for a three branch split. Here, a curve represents the relationship between inlet pressure and flowrate for a series of pipe segments with a given end pressure. The red line is the pressure that we want a flowrate solution for: the pressure of the fluid arriving at the splitter. We have a solution when the curves intersect with the red line in the correct places, such that the flowrates required by each branch sum to the total flow into the splitter.](assets/img/splitter%20curves.png)

It seems like everything you would want to know about the component specific properties of active components that do work on the fluid is external to the network snapshot. If you want to inspect the power consumption of a compressor train, that can be done by processing the results of a simulation, but it doesn't actually affect the results. It's just a way of formatting the output. If you were to calculate that it required a certain amount of power to heat your house, you could use that number to calculate the cost of different types of heaters, but the choice of heater doesn't affect the initial power calculation.

## Stability and robustness

By running snapshots, we can see if our inputs produce a valid output. Not much else. We can't see the boundaries of our valid input region (and it *is* a region rather than a point because we have tolerances on the outlet pressures). We can't, without manual exploration, identify what parts within our valid input region are most stable. We don't know if a straight line between two valid points is always entirely contained in the valid region.

The valid region will move in a life of field simulation as the reservoir pressures increase, but because we're doing binary searches, there is no guarantee that the solution point we land on will move at the same rate as the region of valid inputs. We may jump from one side to the other, skipping over an invalid region in the middle if there happens to be one.

All we can say is that a path exists at the checked intervals from A to B but we can't say how wide it is, whether it's continuous or how long it'll last. We don't know if other paths exist or if ours is optimal.