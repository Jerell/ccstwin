[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "CCSTwin",
    "section": "",
    "text": "Summary\nThis is an outline of what I see as problems with our current model, and some alternative approaches.\nI think we would be able to give more comprehensive answers to questions about pipe networks if we model pipe segments as systems of partial differential equations. Particularly when it comes to designing a network, you want to be able to model segments separately without knowing the valid network configurations in advance."
  },
  {
    "objectID": "whatif.html",
    "href": "whatif.html",
    "title": "1  What if?",
    "section": "",
    "text": "What-if modelling is the evaluation of the network given certain inputs and constraints.\nIt is not the same as solving the network. The forward pass in our search loops could be considered what-if modelling because in that forward pass we’re asking what happens at the outlet if the inlet pressure is X but the output of the model isn’t the answer to that question.\nEvaluating f(x) = x^2 - 16 would look like f(x)\\vert_{x=5} = 9 whereas solving it might look like \nx^2 - 16 = 0 \\\\\n(x - 4)(x + 4) = 0 \\\\\nx = 4, x = -4\n\nWhat we’re making is closer to an algorithm for solving an equation using a particular method than it is to a function that can be evaluated with any inputs. And the method doesn’t work if certain assumptions aren’t true. And we make no attempt to validate those assumptions."
  },
  {
    "objectID": "components.html#wells-and-perforations",
    "href": "components.html#wells-and-perforations",
    "title": "2  Components",
    "section": "2.1 Wells and perforations",
    "text": "2.1 Wells and perforations\nThe analogue functions are designed to imitate the behaviour of wells and perforations by taking data about their inputs and outputs and fitting a curve to those data points. We trust the functions to cover the range we were provided data for, but nothing beyond that.\nThe data points are all from previous flow assurance cases, so they cover the expected operating range, but we have little if any data points for the extremes of our input space. Our search algorithms are not constrained to only cover the expected operating range."
  },
  {
    "objectID": "components.html#splitters",
    "href": "components.html#splitters",
    "title": "2  Components",
    "section": "2.2 Splitters",
    "text": "2.2 Splitters\nThe flowrate search in the splitter relies on the assumption that the relationship between the flowrate in a branch and the outlet pressure is injective. If any two flowrates produce the same outlet pressure then we can’t use a binary search to explore the range of outputs.\nBy testing a range of flowrates for a particular branch, we found a case where the outlet pressure at 2 kgps was higher than both 1 kgps and 3 kgps. This may be extremely low, but it’s within our search domain so it’s a number our search could potentially settle on."
  },
  {
    "objectID": "components.html#inlet-pressure-search",
    "href": "components.html#inlet-pressure-search",
    "title": "2  Components",
    "section": "2.3 Inlet pressure search",
    "text": "2.3 Inlet pressure search\nThis also relies on the assumption that the relationship between the input and output is injective. It’s the same kind of search, but just changing a different variable. It’s possible that a higher inlet pressure does always produce a higher outlet pressure but nobody has demonstrated that.\n\n\n\n\n\n\nImportant\n\n\n\nIf we set the domain of the search to > 2 kgps, that doesn’t solve our problem in general. The peak of the curve is a product of the shape and conditions of the network. If the pipe lengths, heights, diameters, U values, ambient temperatures, roughnesses, etc. were different, the peak probably would be too. By how much and in what direction? We don’t know.\nDemonstrating that we have a particular relationship between our input and output variables for one section of one configuration of one network doesn’t prove the general case. But if we didn’t happen to come across an example of the problem, we wouldn’t even be considering changing our search domain."
  },
  {
    "objectID": "solving.html#discontinuity-points",
    "href": "solving.html#discontinuity-points",
    "title": "3  Solving",
    "section": "3.1 Discontinuity points",
    "text": "3.1 Discontinuity points\n\n\nTable 3.1: Components where discontinuities occur\n\n\n\n\n\n\n\n\n\nPressure\nTemperature\nFlowrate\n\n\n\n\nInlet\nUnknown\nDepends2\nKnown\n\n\nValve\nUnknown\nKnown\nKnown\n\n\nCompressor\nDepends3\nUnknown\nKnown\n\n\nSplitter\nKnown\nKnown\nUnknown\n\n\nHeater\nKnown\nDepends4\nKnown\n\n\nCooler\nKnown\nDepends\nKnown\n\n\n\n\nAt an inlet, we want to know if there are any solutions with a fluid pressure below our maximum. At a valve, we ask “are there valid solutions with a fluid pressure above X at this point?” Depending on how compressors, heaters, and coolers are defined, we might ask whether a pressure/temperature increase to or by a certain amount at this point produces a valid solution.\nYou can produce direct answers to these with a good pipe segment model. If you were to change the set point of a valve, you wouldn’t need to run all your simulations for the entire network again. For every series of pipe segments, we can define a curve similar to that of the reservoir, but for a pipe segment it would describe the relationship between inlet and outlet conditions. At different places in the network, we place constraints on these curves and want to know the value of the variable that is the last remaining degree of freedom.\n\n\n\nInlet pressure demand curves for a three branch split. Here, a curve represents the relationship between inlet pressure and flowrate for a series of pipe segments with a given end pressure. The red line is the pressure that we want a flowrate solution for: the pressure of the fluid arriving at the splitter. We have a solution when the curves intersect with the red line in the correct places, such that the flowrates required by each branch sum to the total flow into the splitter.\n\n\nIt seems like everything you would want to know about the component specific properties of active components that do work on the fluid is external to the network snapshot. If you want to inspect the power consumption of a compressor train, that can be done by processing the results of a simulation, but it doesn’t actually affect the results. It’s just a way of formatting the output. If you were to calculate that it required a certain amount of power to heat your house, you could use that number to calculate the cost of different types of heaters, but the choice of heater doesn’t affect the initial power calculation."
  },
  {
    "objectID": "solving.html#stability-and-robustness",
    "href": "solving.html#stability-and-robustness",
    "title": "3  Solving",
    "section": "3.2 Stability and robustness",
    "text": "3.2 Stability and robustness\nBy running snapshots, we can see if our inputs produce a valid output. Not much else. We can’t see the boundaries of our valid input region (and it is a region rather than a point because we have tolerances on the outlet pressures). We can’t, without manual exploration, identify what parts within our valid input region are most stable. We don’t know if a straight line between two valid points is always entirely contained in the valid region.\nThe valid region will move in a life of field simulation as the reservoir pressures increase, but because we’re doing binary searches, there is no guarantee that the solution point we land on will move at the same rate as the region of valid inputs. We may jump from one side to the other, skipping over an invalid region in the middle if there happens to be one.\nAll we can say is that a path exists at the checked intervals from A to B but we can’t say how wide it is, whether it’s continuous or how long it’ll last. We don’t know if other paths exist or if ours is optimal."
  },
  {
    "objectID": "proposal.html#interface",
    "href": "proposal.html#interface",
    "title": "4  Proposal",
    "section": "4.1 Interface",
    "text": "4.1 Interface\nIf we need a web UI, it makes sense to use React and D3."
  },
  {
    "objectID": "proposal.html#model",
    "href": "proposal.html#model",
    "title": "4  Proposal",
    "section": "4.2 Model",
    "text": "4.2 Model\nI would choose Julia for the network model. Its speed is comparable to Rust and it has features and packages that make it well suited for scientific and differentiable programming. When it comes to solving differential equations in particular, there are lots of options. Functions can be written in a way that more closely resembles the maths notation that would be familiar to SMEs. Julia can also use libraries from Python, C/Fortran, and other languages and can be called from C.\n\n4.2.1 Calling Julia from other languages\n\nJuliaCon 2020 | Integrate Julia and Javascript using Node.js extensions | repo\nUsing TCP sockets\nSimple example of calling Julia from C#\nJdotNET\nC# project that uses Julia"
  },
  {
    "objectID": "proposal.html#risks-and-challenges",
    "href": "proposal.html#risks-and-challenges",
    "title": "4  Proposal",
    "section": "4.3 Risks and challenges",
    "text": "4.3 Risks and challenges\n\nProblem definition and focus: It’s important to understand what we’re doing and what a useful outcome looks like.\nLack of resources and help: It may not always be easy or possible to make progress without input from SMEs who may not always be available. I don’t actually know these techniques myself so I’d be learning as I go.\nNew language: If we use Julia, it may be more difficult for people to get involved in the project if they aren’t familiar with the language. It’s not that hard to pick up though."
  },
  {
    "objectID": "proposal.html#timeline",
    "href": "proposal.html#timeline",
    "title": "4  Proposal",
    "section": "4.4 Timeline",
    "text": "4.4 Timeline\nthe times here don’t mean anything. they are just placeholder values from the Mermaid documentation\n\n\n\n\ngantt\n    dateFormat  YYYY-MM-DD\n    section Model\n    Fluid properties :a1, 2023-04-01, 30d\n    Pipe segment     :after a1  , 20d\n    Sequencing     :after a1  , 20d\n    section User Interface\n    Component definition      :2023-04-12  , 12d\n    Results visualization      : 24d"
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "I’ll come back to this and do proper references later\ncpa\ncpa 2 Phase equilibrium modeling of gas hydrate systems for CO2 capture, page 195\nPhase Equilibria Measurements and Modelling of CO2–Rich Fluids/Brine Systems"
  }
]